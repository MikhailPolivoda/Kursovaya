#include <iostream>
#include <cstdlib>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

class Cashier //: private Data_Input
{
public:
	Cashier(bool& free, int& id, int& time_end_service)
	{
		this->free = free;
		this->id = id;
		this->time_end_service = time_end_service;
	}
	bool getCashierFree()
	{
		return free;
	}
	int getTimeEndService()
	{
		return time_end_service;
	}
	int getCashierId()
	{
		return id;
	}
	void SetCashierEmployment(int& time_service)
	{
		employment += time_service;
	}
	void SetCashierFree(bool free)
	{
		this->free = free;
	}
	void SetTimeEndService(int& time_end_service)
	{
		this->time_end_service = time_end_service;
	}
	
private:
	bool free;
	int id;
	double employment;
	int time_end_service;

};
class Client
{
public:
	Client(int& id, int& cashier_id, int& time_arrival, int& time_service_end, int& time_service)//время конца обслуживания нужно потом для вывода журнала событий
	{
		this->id = id;
		this->time_service = time_service;
		this->time_service_end = time_service_end;
		this->time_expectation = time_expectation;
		this->cashier_id = cashier_id;
	}
	Client(int& id, int& time_arrival)
	{
		this->id = id;
		this->time_arrival = time_arrival;
		//this->time_expectation = time_expectation;
	}
	int getId()
	{
		return id;
	}
	int getTimeExpectation()
	{
		return time_expectation;
	}
	int getTimeArrival()
	{
		return time_arrival;
	}
	int getCashierId()
	{
		return cashier_id;
	}
	int getTimeService()
	{
		return time_service;
	}
	int getTimeServiceEnd()
	{
		return time_service_end;
	}
	void SetTimeExpectation(int time_expectation)
	{
		this->time_expectation += time_expectation;
	}
	friend bool operator <(const Client& obj1, const Client& obj2);
protected:
	int cashier_id;//идентификатор кассира, который обслуживает клиента
	int id;//идентификатор клиента
	int time_service_end;//время конца обслуживания клиента
	int time_service;//время обслуживания
	int time_expectation;//время ожидания
	int time_arrival;//время прибытия

};
bool operator < (const Client& obj1, const Client& obj2);
{
	return obj1.time_arrival < obj2.time_arrival;
}
void modulation()
{
	int operating_time = 480;
	int number_of_employees = 5;
	int arrival_begin = 2;
	int arrival_end = 5;
	int service_begin = 2;
	int service_end = 5;
	int current_time = 0;
	int time_expectation = 0;
	int id_client = 1;
	int id_worker = 1;
	int time_service = 0;
	int time_arrival = 0;//время прибытия
	int another_id = 0;//очередной id клиента по очереди
	int cashier_id = 0;
	int time_service_end = 0;
	vector<Client> queue;
	vector<Client> served_clients;
	vector<Cashier> workers_airport;

	for (int i = 1; i <= number_of_employees; i++)
	{
		workers_airport.push_back(true, i, 0);
	}

	while (current_time < operating_time)
	{
		current_time += (arrival_begin + rand() % (arrival_end + 1));
		time_service = (service_begin + rand() % (service_end + 1));
		time_arrival = current_time;
		queue.push_back(id_client, time_arrival);

		for (auto& cashier : workers_airport)
		{
			if (cashier.getTimeEndService() == current_time)//ищем свободных кассиров
			{
				cashier.SetCashierFree(true);
				time_service_end = current_time + time_service;
				cashier.SetTimeEndService(time_service_end);//время конца обслуживания кассиром
			}
			if (cashier.getCashierFree() == 1)
			{

				cashier.SetCashierEmployment(time_service);
				cashier_id = cashier.getCashierId();
				time_service_end = current_time + time_service;
				for (auto& qp : queue)
				{

					if (qp < (qp + 1))//cравниваем время прибытия, чем меньше время прибытия=>тем первее человек в очереди
					{
						time_arrival = qp.getTimeArrival();
						another_id = qp.getId();
						break;
					}

					break;
				}

				served_clients.push_back(another_id, cashier_id, time_arrival, time_service_end, time_service);//добавляем клиента в вектор обслуженных клиентов
				queue.erase(queue.begin());//удаляем обслуженного клиента из очереди
				vector<Client>(queue).swap(queue);//освобождаем память из под удаленного элемента


				//if (cashier.getCashierFree() == 0)
				//{
				//	for (auto& qp : queue)
				//	{

						//time_service_end = cashier.getTimeEndService();
						//time_expectation = time_service_end - current_time;
						//time_arrival = qp.getTimeArrival();
						//if (current_time > time_expectation+time_arrival) {
						//	qp.SetTimeExpectation(time_expectation);//если кассир занят, то первому человеку в очереди присваиваем время ожидания 
						//}
						//// возможно нужно написать так qp.SetTimeExpectation(1); qp.SetTimeExpectation(time_expectation)
						//if (qp < (qp + 1))
						//{
						//	time_service_end = cashier.getTimeEndService();

						//	time_expectation = time_service_end - current_time;
						//	qp.SetTimeExpectation(time_expectation);//если кассир занят, то первому человеку в очереди присваиваем время ожидания 
						//	break;
						//}

					/*}
					break;
				}*/
				id_client++;

			}
			/*for (auto obj : served_clients)
			{
				cout << obj.getTimeExpectation() << endl;
			}*/
		}
	}
		for (auto obj : served_clients)
		{
			time_service_end = obj.getTimeServiceEnd();
			time_service = obj.getTimeService();
			time_arrival = obj.getTimeArrival();
			time_expectation = time_service_end - time_service - time_arrival;
			cout <<"Время "<<obj.getTimeArrival()<< "Клиент " << obj.getId() << "обслужен кассиром " << obj.getCashierId() << endl;
			cout << "Время обслуживания: " << obj.getTimeService() << ", время ожидания: " << time_expectation << endl;
		}
	
}

	int main()
	{
		modulation();
		return 0;
	}
